<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ByteUtilNetLib</name>
    </assembly>
    <members>
        <member name="T:ByteUtilNetLib.ByteUtil">
            <summary>
            Utilities to operate on Byte-Arrays
            </summary>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetHello">
            <summary>
            return some build information
            	Mode: DEBUG/RELEASE
            	Target Framework
            	CPU
            </summary>
            <returns>hello_mode_tfm_cpu</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.HexToByteArray(System.String)">
            <summary>
            converts a string of HEX-Digits to <code>byte[]</code>
            </summary>
            <param name="src">string of hex digits</param>
            <returns></returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.HexToBytes(System.Byte[],System.Int32,System.String)">
            <summary>
            converts a string of HEX-Digits to byte[]
            </summary>
            <param name="dest">destination</param>
            <param name="destOfs">offset in destination</param>
            <param name="src">string of hex-digits to be parsed. </param>
            <returns>number of bytes</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.BytesToHexString(System.Byte[],System.Char,System.Char)">
            <summary>
            convert a byte array to human readable string in hex representation. 
            </summary>
            <param name="src">source array</param>
            <param name="interChar">character to inserted after each byte</param>
            <param name="interOctet">character to be inserted after each 8th byte</param>
            <returns></returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.BytesToHexString(System.Byte[],System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            convert a byte array to human readable string in hex representation.
            </summary>
            <param name="src">source array</param>
            <param name="srcOfs">start offset in src</param>
            <param name="srcLen">number of bytes to be converted</param>
            <param name="interChar">character to inserted after each byte</param>
            <param name="interOctet">character to be inserted after each 8th byte</param>
            <returns>Hex-string</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.BytesToHex(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            convert a byte array to human readable string in hex representation. Append result to an existing <code>StringBuilder</code>
            </summary>
            <param name="dest">destination</param>
            <param name="src">source</param>
            <param name="srcOfs">start offset in src</param>
            <param name="srcLen">number of bytes to be converted</param>
            <param name="interChar">character to inserted after each byte</param>
            <param name="interOctet">character to be inserted after each 8th byte</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.RevertInline(System.Byte[])">
            <summary>
            revert the content of a byte array: {0,1,2,3,4,5,6} --> {6,5,4,3,2,1,0}
            </summary>
            <param name="src">array to be reverted</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.RevertInline(System.Byte[],System.Int32,System.Int32)">
            <summary>
            revert a part og the content of a byte array.
            e.g {0,1,2,3,4,5,6} --> {0,1,4,3,2,5,6
            </summary>
            <param name="src">array where a part needs to be reverted</param>
            <param name="srcOfs">start offset</param>
            <param name="srcLen">number of bytes to be reverted</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.Revert(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            extract a part of an array and store the bytes in reverted order in another array
            </summary>
            <param name="dest">destination</param>
            <param name="destOfs">destination offset</param>
            <param name="src">array where a part needs to be reverted</param>
            <param name="srcOfs">start offset</param>
            <param name="srcLen">number of bytes to be reverted</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.RevertToArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            extract a part of an array and return the bytes in reverted order
            </summary>
            <param name="src">source</param>
            <param name="srcOfs">start</param>
            <param name="srcLen">length</param>
            <returns></returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutI16LE(System.Byte[],System.Int32,System.Int16)">
            <summary>
            store <code>v</code> as a Signed Int 16 in Little Endian Order
            </summary>
            <param name="dest"></param>
            <param name="ofs"></param>
            <param name="v"></param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutI16BE(System.Byte[],System.Int32,System.Int16)">
            <summary>
            store <code>v</code> as a Signed Int 16 in Big Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutU16LE(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            store <code>v</code> as a Unsigned Int 16 in Little Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutU16BE(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            store <code>v</code> as a Unsigned Int 16 in Big Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutI32LE(System.Byte[],System.Int32,System.Int32)">
            <summary>
            store <code>v</code> as a Signed Int 32 in Little Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutI32BE(System.Byte[],System.Int32,System.Int32)">
            <summary>
            store <code>v</code> as a Signed Int 32 in Big Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutU32LE(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            store <code>v</code> as an Unsigned Int 32 in Little Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutU32BE(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            store <code>v</code> as an Unsigned Int 32 in Big Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutI64LE(System.Byte[],System.Int32,System.Int64)">
            <summary>
            store <code>v</code> as a Signed Int 64 in Little Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutI64BE(System.Byte[],System.Int32,System.Int64)">
            <summary>
            store <code>v</code> as a Signed Int 64 in Big Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutU64LE(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            store <code>v</code> as an Unsigned Int 64 in Little Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.PutU64BE(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            store <code>v</code> as an Unsigned Int 64 in Big Endian Order
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="v">value</param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetI16LE(System.Byte[],System.Int32)">
            <summary>
            get a signed Int 16 value from a byte array. Little Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetI16BE(System.Byte[],System.Int32)">
            <summary>
            get a signed Int 16 value from a byte array. Big Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetU16LE(System.Byte[],System.Int32)">
            <summary>
            get an unsigned Int 16 value from a byte array. Little Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetU16BE(System.Byte[],System.Int32)">
            <summary>
            get an unsigned Int 16 value from a byte array. Big Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetI32LE(System.Byte[],System.Int32)">
            <summary>
            get a signed Int 32 value from a byte array. Little Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetI32BE(System.Byte[],System.Int32)">
            <summary>
            get a signed Int 32 value from a byte array. Big Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetU32LE(System.Byte[],System.Int32)">
            <summary>
            get an unsigned Int 32 value from a byte array. Little Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetU32BE(System.Byte[],System.Int32)">
            <summary>
            get an unsigned Int 32 value from a byte array. Big Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetI64LE(System.Byte[],System.Int32)">
            <summary>
            get a signed Int 64 value from a byte array. Little Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>        
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetI64BE(System.Byte[],System.Int32)">
            <summary>
            get a signed Int 64 value from a byte array. Big Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>        
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetU64LE(System.Byte[],System.Int32)">
            <summary>
            get a unsigned Int 64 value from a byte array. Little Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>        
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.GetU64BE(System.Byte[],System.Int32)">
            <summary>
            get an usigned Int 64 value from a byte array. Big Endian order
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <returns>retrieved value</returns>        
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.ExtractToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            extract a part of an array and return it as a new array
            </summary>
            <param name="src">source</param>
            <param name="ofs">offset</param>
            <param name="len">length</param>
            <returns>byte[len]</returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.RandomArray(System.Int32,System.Random)">
            <summary>
            return a byte[] of Length <code>len</code> with random values 
            </summary>
            <param name="len">length of requested array</param>
            <param name="rnd">rnd to be used. can be <code>null</code> </param>
            <returns></returns>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.Randomize(System.Byte[],System.Int32,System.Int32,System.Random)">
            <summary>
            fill a part of an array with random values
            </summary>
            <param name="dest">destination</param>
            <param name="ofs">offset</param>
            <param name="len">length</param>
            <param name="rnd">rnd to be used. can be <code>null</code> </param>
        </member>
        <member name="M:ByteUtilNetLib.ByteUtil.Randomize(System.Byte[],System.Random)">
            <summary>
            fill an array with random values
            </summary>
            <param name="dest">destination</param>
            <param name="rnd">rnd to be used. can be <code>null</code> </param>
        </member>
    </members>
</doc>
